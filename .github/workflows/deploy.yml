name: Release Homebrew Version

on:
  schedule:
    - cron:  '*/15 * * * *'
  workflow_dispatch:


jobs:
  build:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools twine pip wheel
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Check for update
      id: check
      env:
        AWS_REGION: us-east-1
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        output=$(python update_formula.py)
        echo $output | grep "Updating figgy.rb" && echo "::set-output name=updated::true" || true

    - name: Commit changes
      if: steps.check.outputs.updated == 'true'
      uses: EndBug/add-and-commit@v4
      with:
        author_name: Jordan
        author_email: jordan@figgy.dev
        message: "Releasing new version"
        add: "*"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Set Version Var
      if: steps.check.outputs.updated == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Parse version
        VERSION=$(python get_version.py)
        CLOUD_VERSION_REQUIREMENT=$(curl -s https://raw.githubusercontent.com/figtools/figgy-cli/master/REQUIRES_CLOUD_VERSION)
        echo "Setting release version to $VERSION"
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
        echo "CLOUD_VERSION_REQUIREMENT=$CLOUD_VERSION_REQUIREMENT" >> $GITHUB_ENV

    - name: Create Release
      if: steps.check.outputs.updated == 'true'
      id: create_release
      uses: actions/create-release@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_VERSION }}
        release_name: Release ${{ env.RELEASE_VERSION }}
        body: ${{ steps.prep.outputs.changelog }}
        draft: false
        prerelease: true

    - name: Update Figgy API Latest Version
      if: steps.check.outputs.updated == 'true'
      env:
        AWS_REGION: us-east-1
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        pip install awscli
        version=$(python get_version.py)
        bash release.sh ${{ env.RELEASE_VERSION }} ${{ env.CLOUD_VERSION_REQUIREMENT }}
